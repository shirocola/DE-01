# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLG9DJUF9OAp7rYhu434YDZLykwEXS_2

# อ่านข้อมูลจาก MySQL Database

## Install PyMySQL
"""

! pip install pymysql

"""## Read varialbles .env from file with python-dotenv"""

!pip install python-dotenv

import os
from dotenv import load_dotenv

load_dotenv()

"""## ใช้ config สำหรับเชื่อมต่อ database"""

class Config:
  MYSQL_HOST = os.getenv("MYSQL_HOST")
  MYSQL_PORT = int(os.getenv("MYSQL_PORT"))
  MYSQL_USER = os.getenv("MYSQL_USER")
  MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
  MYSQL_DB = os.getenv("MYSQL_DB")
  MYSQL_CHARSET = os.getenv("MYSQL_CHARSET")

"""## Connect to DB"""

import pymysql

# Connect to the database
connection = pymysql.connect(host=Config.MYSQL_HOST,
                             port=Config.MYSQL_PORT,
                             user=Config.MYSQL_USER,
                             password=Config.MYSQL_PASSWORD,
                             db=Config.MYSQL_DB,
                             charset=Config.MYSQL_CHARSET,
                             cursorclass=pymysql.cursors.DictCursor)

"""## List Tables"""

cursor = connection.cursor()
cursor.execute("show tables;")
tables = cursor.fetchall()
cursor.close()
print(tables)

"""## Query Table"""

with connection.cursor() as cursor:
  cursor.execute("SELECT * FROM audible_data;")
  result = cursor.fetchall()

print("number of rows: ", len(result))

"""## Convert to Pandas"""

import pandas as pd

audible_data = pd.DataFrame(result)

type(audible_data)

audible_data.head()

"""## Query Table (SQL)"""

sql = "SELECT * FROM audible_transaction"
audible_transaction = pd.read_sql(sql, connection)
audible_transaction

"""# Join table: audible_transaction & audible_data"""

transaction = audible_transaction.merge(audible_data, how="left", left_on="book_id", right_on="Book_ID")

"""# Get data from REST API"""

import requests

url = "............" # ใส่ลิงค์ data
r = requests.get(url)
result_conversion_rate = r.json()

print(type(result_conversion_rate))
assert isinstance(result_conversion_rate, dict)

""" ## Convert to Pandas"""

conversion_rate = pd.DataFrame(result_conversion_rate)

conversion_rate

#แปลงจาก index เป็น column date
conversion_rate = conversion_rate.reset_index().rename(columns={"index": "date"})
conversion_rate[:3]

"""# Join the data"""

# copy ตัว timestamp เป็น date เพื่อเตรียม join data
transaction['date'] = transaction['timestamp']
transaction

# แปลงให้จาก timestamp เป็น date ในทั้ง 2 dataframe
transaction['date'] = pd.to_datetime(transaction['date']).dt.date
conversion_rate['date'] = pd.to_datetime(conversion_rate['date']).dt.date
transaction.head()

# merge สอง column เข้าด้วยกัน
final_df = transaction.merge(conversion_rate, how="left", left_on="date", right_on="date")
final_df

# แปลง column จาก string เป็น float
final_df["Price"] = final_df.apply(lambda x: x["Price"].replace("$",""), axis=1)
final_df.head()

final_df["Price"] = final_df["Price"].astype(float)

final_df.dtypes

#สร้าง column 'THBPrice' โดยใช้ column Price * conversion_rate (หาราคาเป็นบาท)
final_df["THBPrice"] = final_df["Price"] * final_df["conversion_rate"]
final_df

# Drop column date
final_df = final_df.drop("date", axis=1)

final_df

"""## Save to CSV"""

final_df.to_csv("output.csv", index=False)
